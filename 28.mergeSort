//Merge sort , best, worst time complexity - O(n logn)

//log n -> for spliiting and n for comparasion

//we split array to single array and then compare the array one by one to sort


function mergeSort(arr) {
    if(arr.length <= 1) {
        return arr;
    }
    let midPoint = Math.floor(arr.length / 2);
    let left = mergeSort(arr.slice(0,midPoint));
    let right = mergeSort(arr.slice(midPoint));
    return merge(left , right);
}

//Merge two sorted array
function merge(arr1 , arr2) {
    let newArr = [];
    let i = 0;
    let j=0;

    while(j < arr2.length && i<arr1.length) {
        if(arr2[j] < arr1[i]) {
            newArr.push(arr2[j]);
            j++;
        } else {
            newArr.push(arr1[i]);
            i++;
        }
    }
    while (i < arr1.length) {
        newArr.push(arr1[i]);
        i++;
    }
    while (j < arr2.length) {
        newArr.push(arr2[j])
        j++;
    }
    console.log(newArr);
    return newArr;
}

mergeSort([1,3,2,4,5])