//STACK FOLLOWS LIFO APPROACH

class Node {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
}

class Stack {
    constructor() {
        this.first = null;
        this.last = null;
        this.size = 0;
    }

    push(val) {
        let newNode = new Node(val);
        if(this.size === 0) {
            this.first = newNode;
            this.last = newNode;
            this.size++;
            return this;
        } else {
            this.last.next = newNode;
            this.last = newNode;
            this.size++;
            return this;
        }
    }

    pop() {
        let current = this.first;
        let newLast = this.first;

        while(current.next !== null) {
            newLast = current;
            current = current.next;
        }

        newLast.next = null;
        this.last = newLast;
        this.size--;
        
        if(this.size === 0) {
            this.first = null;
            this.last = null;
        }
        return this; 
    }
}

let stack = new Stack();
stack.push(10);
stack.push(20);
stack.push(30);

console.log(stack);