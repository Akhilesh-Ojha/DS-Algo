class Node {
    constructor(val){
        this.val = val;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    constructor() {
        this.tail = null;
        this.head = null;
        this.length = 0;
    }

    push(val) {
        let newNode = new Node(val);
        if(this.length === 0) {
            this.head = newNode;
            this.tail = newNode;
            this.length++;
        } else {
            this.tail.next = newNode;
            newNode.prev = this.tail; 
            this.tail = newNode;
            this.length++;
        }
    }

    get(position) {
        if (position >= this.length && position < 0) {
            console.log("Position not found in Linked List");
            return "Out of bound";
        };

        if(position <= (this.length/2)) {
            let current = this.head;
            let count = 0;
            while(current) {
                if(count === position) {
                    return current;
                }
                count++;
                current = current.next;   
            }
        } else {
            let current = this.tail;
            let count = 0;
            while(current) {
                if(count === position) {
                    return current;
                }
                count++;
                current = current.prev;   
            }
        }

    }
}

let list = new DoublyLinkedList();

list.push(20);
list.push(30);
list.push(40);

console.log(list);

// 10 20 30
// 0   1   2
